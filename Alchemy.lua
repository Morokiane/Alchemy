-- title:  Alchemy Courier
-- author: Blind Seer Studios
-- desc:   Courier dangerous potions
-- script: lua
-- input:  gamepad

--Simplify math operations. Floor will round a decimal down
flr=math.floor
ceil=math.ceil
rnd=math.random
cos=math.cos
rad=math.rad
sin=math.sin
max=math.max
min=math.min
del=table.remove

dc=7

--Variables for the screen area
w,h=240,136
hw,hh=w/2,h/2

win={}
txt=""

indicatorsOn=false
--Setup camera coordinates
cam={
	x=0,
	y=0
}

--Collision detectors
--[[These change where the collision detectors are for
the top and sides of a sprite (Bottom can not be changed
from here. The default is every corner and middle of a 
16x16 sprite.]]
coll={
	tlx=3,
	tly=1,
	trx=11,
	try=0
}

--Player variables
p={
	idx=256,
	x=120, --was hw
	y=112,	--was hh
	vx=0, --Velocity X
	vy=0, --Velocity Y
	--curv=0, --Current movement velocity
	vmax=1, --Maximum velocity
	grounded=true,
	flp=0,
	type="player",
	curLife=2,
	maxLife=3,
	coins=00,
	stab=51,
	stabpot=3,
	s={
		idle=256,
		run=288,
		jump=264,
		fall=320,
		dead=270,
		thru=2,
		duck=322
	},
	cpX=0,
	cpY=0,
	cpF=0, --which way did the player run through the checkpoint
	cpA=false, --is a checkpoint active
	canMove=true,
	ducking=false,
	damaged=false,
	onQuest=false
}

e={
	idx=416,
	x=0,
	y=0,
	vx=0,
	vy=0,
	l=true
}

s={
	coin=240,
	check=224,
	checkact=225,
	pit=5,
	heart=244
}
--Control variables to make it easier
c={
	u=0,
	d=1,
	l=2,
	r=3,
	z=4,
	x=5,
	a=6,
	s=7,
	mxt=0,
	myt=0
}

spawns={
	[7]=32,
	[8]=0
	--[240]=432
}

tileAnims={
	[240]={s=.1,f=4}, --coin
	[244]={s=.05,f=5} --heart
}

t=0
ti=0 --ti is time for the animated tiles

pit=false
meterY=16 --offset for the stab rect. as it decreases

quest={}
qnum=0
timer=0
mapStart=0
mapEnd=472 --Change this to what the end of the map will be (this will depend on level)
mapEndY=136
msgbox=false
atStart=true

screenShake=false

screenShake={
	active=false,
	defaultDuration=15,
	duration=15,
	power=3
}

function Init()
	p.cpX=p.x
	p.cpY=p.y
	ents={}
	EntLocations()
end

function OVR()
	HUD()
	Text()
	Debug()
	Mouse()
end

function HUD()
	--BG Rectangles
	rect(1,1,15,77,4)
	rect(15,1,65,14,4)
	--HUD border
	line(15,15,15,78,1)
	line(0,78,14,78,1)
	line(16,15,79,15,1)
	line(80,0,80,15,1)
	line(0,0,79,0,1)
	line(0,0,0,77,1)
	--Coin
	spr(449,30,4,0)
	print(string.format("x%02d",p.coins),39,6,1,true,1,false)
	--Potion
	rect(7,meterY,2,p.stab,2)
	line(7,15,8,15,1)
	line(6,16,6,65,1)
	line(9,16,9,65,1)
	line(7,66,8,66,1)
	if p.curLife==0 then
		spr(454,4,68,0)
	elseif p.stab<5 then
		spr(453,4+t%rnd(1,4),68+t%rnd(1,2),0)
	elseif p.stab<15 then
		spr(453,4+t%rnd(1,2),68,0)
	else
		spr(453,4,68,0)
	end
 
 if(time()%500>250) and p.stab<=10 and p.curLife>0 then
 	print('Warning!',18,18,1)
	end
	--Hearts
	for num=1,p.maxLife do
		spr(452,-4+8*num,4,0)
	end
	
	for num=1,p.curLife do
		spr(451,-4+8*num,4,0)
	end
	--Stabilizer
	spr(455,58,4,0)
	print("x"..p.stabpot,66,6,1,true,1,false)
end

function Debug()
	if indicatorsOn then
		print("FPS: "..fps:getValue(),w-24,0,dc,false,1,true)
		print("Indicators: " ..tostring(indicatorsOn),1,0,dc,false,1,true)
		print("MaxV: "..flr(p.vy),1,8,dc,false,1,true)
		print("Grounded: "..tostring(p.grounded),48,8,dc,false,1,true)
		print("Life: "..p.curLife,48,16,dc,false,1,true)
		print("Max Life: "..p.maxLife,72,16,dc,false,1,true)
		print("Move: "..tostring(p.canMove),48,24,dc,false,1,true)
		print("Saved: "..tostring(saved),48,32,dc,false,1,true)
		print("Stab: "..tostring(p.stab),48,40,dc,false,1,true)
		print("QNum: "..qnum,48,48,dc,false,1,true)		
		print("X: "..p.x,1,16,dc,false,1,true)
		print("Y: "..p.y,1,24,dc,false,1,true)
		print("Check X: "..p.cpX,1,32,dc,false,1,true)
		print("Check Y: "..p.cpY,1,40,dc,false,1,true)
		print("Pit: "..tostring(pit),1,48,dc,false,1,true)
		print("Fall: "..p.vy,1,56,dc,false,1,true)
		print("Dmgd: "..tostring(p.damaged),1,64,dc,false,1,true)
		print("Timer: "..timer,1,72,dc,false,1,true)
		print("Quest: "..tostring(p.onQuest),1,80,dc,false,1,true)
		print("-Save Data-",1,88,dc,false,1,true)
		print("HP: "..pmem(0),1,96,dc,false,1,true)
		print("Stab: "..pmem(1),1,104,dc,false,1,true)
		print("X: "..pmem(2),1,112,dc,false,1,true)
		print("Y: "..pmem(3),1,120,dc,false,1,true)
		print("Meter: "..pmem(4),1,128,dc,false,1,true)
		print("Quest: "..pmem(5),36,96,dc,false,1,true)
		--Collision indicators
		pix(p.x+coll.tlx+p.vx-cam.x,p.y%136+coll.tly+p.vy,6) --top left
		pix(p.x+coll.trx+p.vx-cam.x,p.y%136+coll.tly+p.vy,6) --top right
		pix(p.x+7+p.vx-cam.x,p.y%136+coll.tly+p.vy,15) --top mid
		pix(p.x+8+p.vx-cam.x,p.y%136+coll.tly+p.vy,15) --top mid
		pix(p.x+coll.tlx+p.vx-cam.x,p.y%136+15+p.vy,6) --bottom left
		pix(p.x+coll.trx+p.vx-cam.x,p.y%136+15+p.vy,6) --bottom right
		pix(p.x+7+p.vx-cam.x,p.y%136+16+p.vy,7) --bottom mid
		pix(p.x+8+p.vx-cam.x,p.y%136+16+p.vy,7) --bottom mid
		--On ground indicators
		pix(p.x+coll.tlx-cam.x,p.y%136+16+p.vy,12) --bottom left
		pix(p.x+coll.trx-cam.x,p.y%136+16+p.vy,12) --bottom right
		--Middle left indicators
		pix(p.x+coll.tlx+p.vx-cam.x,p.y%136+7,8) --left center
		pix(p.x+coll.tlx+p.vx-cam.x,p.y%136+8,8) --left center
		--Middle right indicators
		pix(p.x+coll.trx+p.vx-cam.x,p.y%136+7,8) --right center
		pix(p.x+coll.trx+p.vx-cam.x,p.y%136+8,8) --right center
	end
end

function TIC()
	cls(4)
	--[[initial placement of the camera these settings 
	place	the map tile centered on the screen]]
 if atStart then
 	Start()
 else
 	Main()
 end
 
	if keyp(9) and indicatorsOn==false then
		indicatorsOn=true
	elseif keyp(9) and indicatorsOn==true then
		indicatorsOn=false
	end
--[[	
	if btnp(0) then
		table.insert(quest,1)
	end
	if btnp(1) then
		table.remove(quest,1)
	end]]
	Update()
	
	ti=ti+1
	
	if keyp(28) then
		Save()
	elseif keyp(29) then
		Load()
	end

--[[
	if(time()%500>250) then
  print('Warning!',h/2,w/2)
 end
	
	if(time()>2000)then
  print('Fugit inreparabile tempus',32,60)
 end]] 
	--t=time()//20
end

function Start()	
	spr(p.idx,p.x,p.y,0,1,p.flp,0,2,2)
	map(cam.x//8,cam.y//8,31,18,-(cam.x%8),-(cam.y%8),0,1,remap)
end

function Main()

	cam.x=p.x-120
	cam.y=p.y-113

	if cam.x<mapStart then
		cam.x=mapStart
	elseif cam.x>mapEnd-232 then
		cam.x=mapEnd-232
	end
	--this will only work for two vertical map screens
	if cam.y<mapStart then
		cam.y=mapStart
	elseif cam.y>mapEndY-113 then
		cam.y=mapEndY
	end
	map(cam.x//8,cam.y//8,31,18,-(cam.x%8),-(cam.y%8),0,1,remap)
	
	if p.damaged then
		if (time()%300>200) then
			spr(p.idx,p.x-cam.x,p.y-cam.y,0,1,p.flp,0,2,2)
	 end
 else
 	spr(p.idx,p.x-cam.x,p.y-cam.y,0,1,p.flp,0,2,2)
 end
	--Scrolling only along X but loading full map grid on Y
	--map(cam.x//8,(p.y//136)*17,31,18,-(cam.x%8),-(cam.y%8),0,1,remap)
	--[[if p.damaged then
		if (time()%300>200) then 
 		spr(p.idx,p.x-cam.x,p.y%136,0,1,p.flp,0,2,2)
  end
 else
 	spr(p.idx,p.x-cam.x,p.y%136,0,1,p.flp,0,2,2)
 end]]

end

function Update()
	Enemy()
	Player()
	Collectiables()
	Quest()
	CheckPoint()
	Stabilizer()
	ShakeScreen()
	Blinky()
end

function Mouse()
	mx,my,ml,mm,mr = mouse()
	c.mxt=mx//8
	c.myt=my//8	
		if ml then 
			p.x=mx
			p.y=my
		end
	spr(16,mx,my,0)
end

function psfx(o,i)
	if o.type=="player" then
		sfx(i) 
	end 
end

function Player()
	--this enables a running
	if p.canMove and not msgbox then
		if btn(c.r) and btn(c.a) then
			p.vx=p.vmax+1
			if p.grounded then
				p.idx=p.s.run+t%80//10*2
				t=time()//5
				p.stab=p.stab-.1
				meterY=meterY+.1
			end
			p.flp=1
		elseif btn(c.l) and btn(c.a) then
			p.vx=-p.vmax-1
			if p.grounded then
				p.idx=p.s.run+t%80//10*2
				t=time()//5
				p.stab=p.stab-.1
				meterY=meterY+.1
			end
			p.flp=0
		elseif btn(c.l) then
			p.vx=-p.vmax
			if p.grounded then
				p.idx=p.s.run+t%80//10*2
				t=time()//5
			end
			p.flp=0
		elseif btn(c.r) then 
			p.vx=p.vmax
			if p.grounded then
				p.idx=p.s.run+t%80//10*2
				t=time()//5
			end
			p.flp=1
		else
			p.vx=0
			p.idx=p.s.idle+t%40//10*2
			t=time()//30
		end
	end
	--jump
	if p.vy==0 and btnp(c.z) and p.canMove and not msgbox and not p.ducking then
		p.vy=-3.6
		p.grounded=false
		p.stab=p.stab-1
		meterY=meterY+1
		--psfx(o,1)
	end
	--duck
	if btn(c.d) and p.vx==0 and not msgbox then
		p.idx=p.s.duck
		p.ducking=true
		p.canMove=false
		coll.tly=6
	else
		p.canMove=true
		p.ducking=false
		coll.tly=1
	end
	--[[crawl
	if btn(c.l) and p.ducking then
		p.idx=p.s.duck
		p.vx=p.vx+p.vmax+1
	end]]

	--check if there is something beside the player
	if solid(p.x+coll.tlx+p.vx,p.y+coll.tly+p.vy,0) or 
				solid(p.x+coll.trx+p.vx,p.y+coll.tly+p.vy,0) or
				solid(p.x+coll.tlx+p.vx,p.y+15+p.vy,0) or 
				solid(p.x+coll.trx+p.vx,p.y+15+p.vy,0) or
				solid(p.x+coll.tlx+p.vx,p.y+7,0) or
				solid(p.x+coll.tlx+p.vx,p.y+8,0) or
				solid(p.x+coll.trx+p.vx,p.y+7,0) or
				solid(p.x+coll.trx+p.vx,p.y+8,0) then
		p.vx=0
	end
	--checks if you are on the ground
	if solid(p.x+coll.tlx,p.y+16+p.vy,0) or
				solid(p.x+coll.trx,p.y+16+p.vy,0) or
				solid(p.x+7+p.vx,p.y+16+p.vy,0) or
				solid(p.x+8+p.vx,p.y+16+p.vy,0) or
				--some how this triggers when you run and jump onto it
				solid(p.x+coll.tlx,p.y+16+p.vy,1) or
				solid(p.x+coll.trx,p.y+16+p.vy,1) or
				solid(p.x+7+p.vx,p.y+16+p.vy,1) or
				solid(p.x+8+p.vx,p.y+16+p.vy,1) then
		p.vy=0
		p.grounded=true
	else
		p.vy=p.vy+0.2
		p.idx=p.s.fall
		p.grounded=false
	end
	--check if something is above
	if p.vy<0 and (solid(p.x+coll.tlx+p.vx,p.y+coll.tly+p.vy,0) or 
																solid(p.x+coll.trx+p.vx,p.y+coll.tly+p.vy,0) or
																solid(p.x+7+p.vx,p.y+coll.tly+p.vy,0) or 
																solid(p.x+8+p.vx,p.y+coll.tly+p.vy,0)) then
		p.vy=0
	elseif p.vy<0 and (solid(p.x+coll.tlx+p.vx,p.y+coll.tly+p.vy,1) or 
																solid(p.x+coll.trx+p.vx,p.y+coll.tly+p.vy,1) or
																solid(p.x+7+p.vx,p.y+coll.tly+p.vy,1) or 
																solid(p.x+8+p.vx,p.y+coll.tly+p.vy,1)) then
		fset(p.s.thru,1,false)
	end
	--[[if the sprite is tile 2 and has flag 1 either set
	as true or false]]
	if p.grounded and not btnp(c.d) and p.canMove then
		fset(p.s.thru,1,true)
	elseif p.grounded then
		fset(p.s.thru,1,false)
	end
	--[[so close! at 0 won't work. 1.5 kinda works]]
	if p.vy>=1.5 then
		fset(p.s.thru,1,true)
	end
	
	if p.x<mapStart then
		p.x=mapStart
	end
	if p.x>mapEnd-8 then
		p.x=mapEnd-8
	end

	p.x=p.x+p.vx
	p.y=p.y+p.vy
	
	Pit()
	Damage()
end

function Dead()
	--[[not sure how to handle this once the player dies?
	do they just start the level over or is it game over
	and they go back to the last save?]]
	if p.curLife==0 then
		p.canMove=false
		p.stab=0
		print("Dead!",p.x,p.y-5,7)
		p.idx=p.s.dead
		table.remove(quest,1)
	end 
end
--[[should probably move the p.stab/meterY to its own
function then return it back]]
function Damage()	
	if p.vy>2 then
		p.stab=p.stab-.1
		meterY=meterY+.1
	end
	if p.vy>4 then
		p.stab=p.stab-.5
		meterY=meterY+.5
	end
	--Spikes are flag 7
	if fget(mget(p.x//8,p.y//8+1),7) and not p.damaged then
		p.stab=p.stab-5
		meterY=meterY+5
		screenShake.active=true
		p.damaged=true
	end
	if p.stab<=0 and p.curLife>0 then
		p.curLife=p.curLife-1
		p.x=p.cpX
		p.y=p.cpY
		p.flp=p.cpF
		p.stab=51
		meterY=16
	elseif p.curLife<=0 then
		Dead()
	end
end

function Blinky()
	if p.damaged and timer<=100 then
		timer=timer+1
	elseif timer>=100 then
		p.damaged=false
		timer=0
	end
end

function Stabilizer()
	if btnp(c.x) and p.stabpot>0 and p.stab>=31 and p.stab<51 then
		p.stab=51
		meterY=16
		p.stabpot=p.stabpot-1
	elseif btnp(c.x) and p.stab<31 and p.stabpot>0 then
		p.stab=p.stab+15
		meterY=meterY-15
		p.stabpot=p.stabpot-1
	end
end

function SingleEnemy()
	--Set initial velocity
	e.vx=0
	--[[if on solid ground move left, if velocity becomes 0
	set moving left to false and move in the other direction]]
	if solid(e.x+1,e.y+16+e.vy) and e.l then
		e.vx=e.vx-0.2
	elseif e.vx==0 then
		e.l=false
	end
	
	if solid(e.x+14,e.y+16+e.vy) and not e.l then
		e.vx=e.vx+0.2
	elseif e.vx==0 then
		e.l=true
	end
	--apply movement to the enemy
	e.x=e.x+e.vx
end

function Pit()
	if mget(p.x//8+1,p.y//8)==s.pit then
		if p.cpA then
			p.x=p.cpX
			p.y=p.cpY
			p.flp=p.cpF
		else
			p.x=54
			p.y=112 --These should be beginning of level
		end
		p.curLife=p.curLife-1
	end
end

function CheckPoint()
	if mget(p.x//8+1,p.y//8+1)==s.check then
		mset(p.x/8+1,p.y/8+1,s.checkact)
		p.cpX=p.x
		p.cpY=p.y
		p.cpF=p.flp
		p.cpA=true
	end
end

function Collectiables()
	--[[Collisions with collectibles can be done either with
	flags set on the sprites, or by looking for the actual
	sprite itself.]]
	--rectb(p.x-1,p.y+1,8,8,7)
	if mget(p.x//8+1,p.y//8+1)==s.coin or mget(p.x//8,p.y//8)==s.coin then
		mset(p.x//8+1,p.y//8+1,0)
		mset(p.x//8,p.y//8,0)
		p.coins=p.coins+1
		--table.remove(ents,i)
		--sfx(01,'E-6',5)
	end
	if (mget(p.x//8+1,p.y//8+1)==s.heart or mget(p.x//8,p.y//8)==s.heart) and p.curLife<3 then
		mset(p.x//8+1,p.y//8+1,0)
		mset(p.x//8,p.y//8,0)
		p.curLife=p.curLife+1
		--table.remove(ents,i)
		--sfx(01,'E-6',5)
	end
end

function Text()
	if msgbox==true then
		AddWin(hw,hh,128,65,3,txt)
		rect(179,95,7,7,4)
		print("A",180,97+math.sin(time()//90),1)
	end
end

function Quest()
	switch(action,
		case(quest[1],function() NoQuest() end),
		case(quest[2],function() QuestOne() end),
		case(quest[3],function() QuestTwo() end),
		default(function() print("End of table",w/2,0,7) end)
	)
	for counter=1,#quest do
		print(quest[counter],w/2,(counter*8),7)
	end
	
	while qnum>0 do
		table.insert(quest,1)
		qnum=qnum-1
	end
	--quest giver sprite
	spr(464,8-cam.x,104-cam.y,0,1,0,0,2,3)
	
	if mget(p.x//8,p.y//8)==7 or mget(p.x//8,p.y//8)==8 then
		spr(448,p.x-cam.x+4,p.y-cam.y-8,0)
	end
	
	if fget(mget(p.x//8,p.y//8),2) and btnp(c.a) and not msgbox then
		p.canMove=false
		msgbox=true
		p.onQuest=true
		atStart=false
		table.insert(quest,"On quest")
	elseif fget(mget(p.x//8,p.y//8),2) and btnp(c.a) then
		p.canMove=true
		msgbox=false
	end
	
	if fget(mget(p.x//8,p.y//8),3) then
		p.onQuest=false
	end
end

function NoQuest()
	print("No quest",w/2,0,7)
end

function QuestOne()
	print("Quest One",w/2,0,7)
	spr(478,(57*8)-cam.x,(30*8)-cam.y,0,1,0,0,2,3)
	if p.onQuest then
		txt="Courier,\nPlease take this potion to\nJanna at the edge of the forest.\nPlease be careful and not\nbreak it. We don't want to\nlose you like the last one."
	end
	
	if fget(mget(p.x//8,p.y//8),3) and btnp(c.a) and not msgbox then
		txt="Thank you!\nThis will work nicely."
		msgbox=true
	elseif fget(mget(p.x//8,p.y//8),3) and btnp(c.a) then
		msgbox=false
		atStart=true
		NextLvl()
	end
end

function QuestTwo()
	print("Quest Two",w/2,0,7)
	txt="blah"
end

function NextLvl()
	--This will need a sync that take me back to starting map
	p.x=120
	p.y=112
	p.stab=51
	meterY=16
	cam.x=p.x-120
	cam.y=p.y-112
	Save()
end

function Save()
	--[[pmem
	pmem index -> val Retrieve data from persistent memory
	pmem index val -> val Save data to persistent memory
	]]
	local savStab=ceil(p.stab)
	local savMeter=ceil(meterY)-1
	local savY=flr(p.y)
	--pmem(saveScoreIdx,bestScore)
 --bestScore = pmem(saveScoreIdx)
	pmem(0,p.curLife)
	pmem(1,savStab)
	pmem(2,p.x)
	pmem(3,savY)	
	pmem(4,savMeter)
	pmem(5,#quest)
	pmem(6,p.coins)
end

function Load()
	p.curLife=pmem(0)
	p.stab=pmem(1)
	p.x=pmem(2)
	p.y=pmem(3)
	meterY=pmem(4)
	qnum=pmem(5)
	p.coins=pmem(6)
end

function AddEnt(t)
	table.insert(ents,{
		t=t.t or 0,
		x=t.x,
		y=t.y,
		vx=t.vx or 0,
		vy=t.vy or 0,
		l=t.l,
		flp=t.flp,
		spr=t.spr,
		type=t.type or "normal",
	})
end

function EntLocations()
	for x=0,240 do
		for y=0,136 do
			--if spawns[mget(x,y)] then
			--	mset(x,y,32)
			if mget(x,y)==160 then
			--if spawns[mget(x,y)] then
				AddEnt({spr=(mget(x,y)+256),x=x*8,y=y*8,type="flier"})
			elseif mget(x,y)==128 then
				AddEnt({spr=(mget(x,y)+256),x=x*8,y=y*8,type="blob"})
			end
		end
	end
end

function Enemy()
	for i,e in pairs(ents) do
		e.vx=0
		
		if e.type=="flier" then
			--[[if on solid ground move left, if velocity becomes 0
			set moving left to false and move in the other direction]]
			if not solid(e.x-1,e.y+15+e.vy,0) and solid(e.x+1,e.y+24+e.vy) and e.l then
				e.vx=e.vx-0.3
			elseif e.vx==0 then
				e.l=false
				e.flp=1
			end
			
			if not solid(e.x+14,e.y+15+e.vy,0) and solid(e.x+14,e.y+24+e.vy) and not e.l then
				e.vx=e.vx+0.3
			elseif e.vx==0 then
				e.l=true
				e.flp=0
			end
			--apply movement to the enemy
			e.x=e.x+e.vx
			--Draw the sprite and replace the map tile
			spr(e.spr+ti%40//10*2,e.x-cam.x,e.y-cam.y,0,1,e.flp,0,2,2)
			if mget(e.x//8,e.y//8)==160 then
				mset(e.x/8,e.y/8,0)
			end
			if indicatorsOn then
				print("x"..e.x//8,e.x-cam.x,e.y-13-cam.y,0,false,1,true)
				print("y"..e.y//8,e.x-cam.x,e.y-7-cam.y,0,false,1,true)
				
				print("x"..p.x//8,p.x-cam.x,p.y-13-cam.y,0,false,1,true)
				print("y"..p.y//8,p.x-cam.x,p.y-7-cam.y,0,false,1,true)
			end
			
			--should eventually update this to use the actual player collider
			if e.x//8==p.x//8 and (e.y//8==p.y//8 or e.y//8+1==p.y//8+1 or e.y//8+1==p.y//8) and not p.damaged and not p.ducking then
				print("hit",p.x-8-cam.x,p.y-cam.y,7)
				p.stab=p.stab-10
				meterY=meterY+10
				screenShake.active=true
				p.damaged=true
			end
		end
		
		if e.type=="blob" then
		
			if not solid(e.x-1,e.y+15+e.vy,0) and solid(e.x+1,e.y+16+e.vy) and e.l then
				e.vx=e.vx-0.3
			elseif e.vx==0 then
				e.l=false
				e.flp=0
			end
			
			if not solid(e.x+14,e.y+15+e.vy,0) and solid(e.x+14,e.y+16+e.vy) and not e.l then
				e.vx=e.vx+0.3
			elseif e.vx==0 then
				e.l=true
				e.flp=1
			end
			e.x=e.x+e.vx
			
			if indicatorsOn then
				print("x"..e.x//8,e.x-cam.x,e.y-13-cam.y,0,false,1,true)
				print("y"..e.y//8,e.x-cam.x,e.y-7-cam.y,0,false,1,true)
			end
			
			spr(e.spr+ti%40//10*2,e.x-cam.x,e.y-cam.y,0,1,e.flp,0,2,2)
			if mget(e.x//8,e.y//8)==128 then
				mset(e.x/8,e.y/8,0)
			end
			if (e.x//8==p.x//8 or e.x//8+1==p.x//8+1 or e.x//8==p.y//8+1 or e.x//8+1==p.y//8+1) and (e.y//8==p.y//8 or e.y//8==p.y//8+1 or e.y//8+1==p.y//8) and not p.damaged and not p.ducking then
				print("hit",p.x-8-cam.x,p.y-cam.y,7)
				p.stab=p.stab-10
				meterY=meterY+10
				screenShake.active=true
				p.damaged=true
			end
		end
	end --for
end

Init()

--Tools
function remap(animTile)
	local outTile,flip,rotate=animTile,0,0
	local at=tileAnims[animTile]
	if at then
		outTile=outTile+flr(ti*at.s)%at.f
	end
	return outTile,flip,rotate
end

function switch(n,...)
	for _,v in ipairs{...} do
		if v[1]==n or v[1]==nil then
			return v[2]()
		end
	end
end

function case(n,f)
	return {n,f}
end

function default(f)
	return{nil,f}
end
--this returns the x,y and flag for tile collisions
function solid(x,y,f)
	return fget(mget(flr(x//8),flr(y//8)),f)
end

function ShakeScreen()
 if screenShake.active==true then
		poke(0x3FF9,rnd(-screenShake.power,screenShake.power))
		poke(0x3FF9+1,rnd(-screenShake.power,screenShake.power))
		screenShake.duration=screenShake.duration-1
		
		if screenShake.duration<=0 then
			screenShake.active=false
		end
 else
  memset(0x3FF9,0,2)
  screenShake.active=false
  screenShake.duration=screenShake.defaultDuration
	end
end

function AddWin(x,y,w,h,col,txt)
	for i=1,#win do
		table.insert(win,i,#win)
	end
	rect(x-w/2,y-h/2,w,h,col)
	rectb(x-w/2+1,y-h/2+1,w-2,h-2,1) --no idea but it works
 print(txt,x-w/2+3,y-h/2+3,1,0,1,true)
end

function DrawWin()
	for w in pairs(win) do
		rect(w.x,w.y,w.w,w.h,2)
	end
end

FPS={}

function FPS:new(o)
	o=o or {}
	setmetatable(o,self)
	self.__index=self
	self.value=0
	self.frames=0
	self.lastTime=0
	return FPS
end

function FPS:getValue()
	if (time()-self.lastTime<=1000) then
		self.frames=self.frames+1
	else
		self.value=self.frames
		self.frames=0
		self.lastTime=time()
	end
	return self.value
end

fps=FPS:new()
-- <TILES>
-- 001:1111111111111111111111111111111111111111111111111111111111111111
-- 002:3333333303000000003000000003000000003000000003000000003000000003
-- 003:6000000600000000006006000006600000066000006006000000000060000006
-- 004:fffffffffffffffffff77fffff7777ffff7777fffff77fffffffffffffffffff
-- 005:7777777770000007700000077000000770000007700000077000000777777777
-- 006:0000000000000000000000000000000000077000007007000700007070000007
-- 007:aaaaaaaaa008800aa080080aa000800aa008000aa080000aa088880aaaaaaaaa
-- 008:aaaaaaaaa008800aa000080aa000800aa000080aa080080aa008800aaaaaaaaa
-- 016:0100000013100000133100001333100013333100133110000113100000000000
-- 128:0000000000000000000dd00000dddd0000dddd00000dd0000000000000000000
-- 160:0000000000000000000990000099990000999900000990000000000000000000
-- 192:dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
-- 224:0230000002300000023000000230000002300000023000000110000011110000
-- 225:0211000002131100021333110213311002111000021000000110000011110000
-- 240:0033330003322330332442233444443334444443124444230124423000111100
-- 241:0003300000343300002423000024220000242200002422000011110000011000
-- 242:0003300000033000000320000002200000022000000220000002100000011000
-- 243:0003300000334300003242000022420000224200002242000011110000011000
-- 244:0000000002200210222222212222222102222210002221000002100000000000
-- 245:0000000002200210222222312222233102223310002331000003100000000000
-- 246:0000000002200310222233212223322102332210003221000002100000000000
-- 247:0000000002200210223322212332222103222210002221000002100000000000
-- 248:0000000003300210332222213222222102222210002221000002100000000000
-- </TILES>

-- <SPRITES>
-- 000:0000000000012222000013330000144400011444000122220000122200001222
-- 001:0000000022221000324211004222321022212310222123102231311022131110
-- 002:0000000000000000000122220000133300001444000114440001222200001222
-- 003:0000000000000000222210003242110042213210222123102231231022133110
-- 004:0000000000000000000122220000133300001444000114440001222200001222
-- 005:0000000000000000222210003242110042213210222123102231231022133110
-- 006:0000000000000000000122220000133300001444000114440001222200001222
-- 007:0000000000000000222211003242321042212310222123102231311022131110
-- 008:0000000000000000000122220000133300001444000114440001222200001222
-- 009:0000000000000000222210003242110042213210222123102231231022133110
-- 010:0000000000000000000000000001222200001333000014440001144400012222
-- 011:0000000000000000000000002222100032421100422132102221231022312310
-- 012:0000000000000000000000000000000000012223000013330000144400001442
-- 013:0000000000000000000000000000000032421100422132102221231022212310
-- 014:0000000000000000000000000000000000000000000000000000000000011111
-- 015:0000000000000000000000000000000000000000000000000000000010000010
-- 016:0001122300131233001331110001132200001111000012210000113100000111
-- 017:3111211031412210144111003311000011110000122100001131000011110000
-- 018:0001122300131233001331110001132200001111000012210000113100000111
-- 019:3111111031412110144122103311110011110000122100001131000011110000
-- 020:0000122300011233001311110013332200011111000012210000113100000111
-- 021:3111111031112110114122103441110011110000122100001131000011110000
-- 022:0001122300131233001331110001132200001111000012210000113100000111
-- 023:3111211031412210144111003311000011110000122100001131000011110000
-- 024:0000122200001222000141110001422200001111000001230000011100000000
-- 025:2111111021412110114122102211110011110000122100001113100000111000
-- 026:0000122200001222000011220000011100000122000001110000001300000001
-- 027:2213311021111110214121101141221022111100111100001221000011110000
-- 028:0000122200001222000112220001412200011411000011120000000100000000
-- 029:2231311022131110211121102141221011411100222110003113100011111000
-- 030:0112212201312122001121120132214101111214012232210122132200111133
-- 031:2111112022444320244443202443332012432220122222201224222011122200
-- 032:0000000000012222000013330000144401111444013322220133122200111223
-- 033:0000000022221000324211004222121022212310222123102231311033313110
-- 034:0000000000012222000013330000144401111444013322220133122200111223
-- 035:0000000022221000324211004222121022212310222123102231311033313110
-- 036:0000000000012222000013330000144400011444000122220011122200131223
-- 037:0000000022221000324211004222121022212310222123102231311033312110
-- 038:0001222200001333000014440001144400012222000012220000122200001223
-- 039:2222100032421000422210002221110022213210223123102311231033133110
-- 040:0001222200001333000014440001144400012222000012220000122200001223
-- 041:2222100032421000422210002221110022213210223123102311231033133110
-- 042:0001222200001333000014440001144400012222000012220000122200001223
-- 043:2222100032421000422210002221110022213210223123102311231033133110
-- 044:0001222200001333000014440001144400012222000012220000122200001223
-- 045:2222100032421000422210002221110022213210223123102311231033133110
-- 046:0000000000012222000013330000144400011444000122220011122200131223
-- 047:0000000022221000324211004222121022212310222123102231311033312110
-- 048:0000122300001233000011110000132200001111000012310000011100000000
-- 049:3331211032144210112341003311100011110000122100001131000001110000
-- 050:0000122300001233000011110000132200001111000012310000011100000000
-- 051:3331211032144210112341003311100011110000122100001131000001110000
-- 052:0012122300011233000121110000132200001111000011230000011100000000
-- 053:3333111033244210111441003311100011111000112210000113100000111000
-- 054:0011122300131233000121110000132200001111000012210000113100000110
-- 055:3311111034412110144222103311110011111000002310000111100000000000
-- 056:0000122300011233000121110000132200001111000012210000131100001110
-- 057:4411111044212110111222103311110011111000012310000111100000000000
-- 058:0000122300011233000121110000132200001111000012210000131100001110
-- 059:4411111044212110111222103311110011111000012310000111100000000000
-- 060:0011122300131233000121110000132200001111000012210000113100000110
-- 061:3311111034412110144222103311110011111000012310000111100000000000
-- 062:0012122300011233000121110000132200001111000011230000011100000000
-- 063:3333111033244210111441003311100011111000112210000113100000111000
-- 064:0000000000012222000013330000144401111444013322220133122200111223
-- 065:0000000022221000324211004222121022211310222441102213411033111310
-- 066:0000000000000000000000000000000000000000000000000012222200013333
-- 067:0000000000000000000000000000000000000000000000002221000024211000
-- 080:0000122300001233000011110000132200001111000012310000011100000000
-- 081:3331231032112210112121003311100011110000122100001131000001110000
-- 082:0001444400114442001222220001222200011133000111130001311100013311
-- 083:2212110022112110231122212111111111441111314411101111311011111100
-- 128:0000000000000000001101110133133300113422001342220013222201342222
-- 129:0000000000000000110011003311331022331100222231002222231022222331
-- 130:0000000000000000001000000131011100131333000134220013422200132222
-- 131:0000000000000000000001001100131033113100223310002222310022222310
-- 132:0000000000000000000000000010001101310133001314220001422200132222
-- 133:0000000000000000000000001100001033110131223313102222310022222310
-- 134:0000000000000000001000000131011100131333000134220013422200132222
-- 135:0000000000000000000001001100131033113100223310002222100022222100
-- 144:0134222213332222313322221133322201333333011333330011133300011111
-- 145:2222231322222311222223102222331022233310333331103333110011111000
-- 146:0134222201342222133322223133222211333222011333330011133300111111
-- 147:2222233122222313222223112222231022223310222331103333110011111100
-- 148:0134222211342222333322221333222213333222113333330111133301111111
-- 149:2222233122222313222223112222233122223331222333113333111011111110
-- 150:0134222201342222133322223133322211333333011333330011133300011111
-- 151:2222231022222130222221102222310022233100333311003333100011111000
-- 160:3330000023330000022300000002330200002222000022210002111200211311
-- 161:0000033300003332000332202332200011200000111000001110000021000000
-- 162:0000000003333300233223320220022200002221000211120021131100021112
-- 163:0000000000333300233223301120022011100000111000002100000012000000
-- 164:0000000000003332003332220022222100021112002113110002111200002220
-- 165:0000000023333000112233301110223011100020210000001200000022000000
-- 166:0000000000000000033333002332233202200222000022210002111200211311
-- 167:0000000000000000003333002332233011200220111000001110000021000000
-- 176:0002111200002220000000000000000200000002000000020000000000000000
-- 177:1200000022000000220000004220000022200000222000002200000000000000
-- 178:0000222000000000000000020000002200000022000000020000000000000000
-- 179:2200000022000000220000004200000022000000200000000000000000000000
-- 180:0000000000000002000000020000000200000000000000000000000000000000
-- 181:2200000024200000222000002220000022000000000000000000000000000000
-- 182:0002111200002220000000000000000000000000000000000000000000000000
-- 183:1200000022000000022000002242000022220000222200000220000000000000
-- 192:0000000001111110133333311322223113233310013311000011000000100000
-- 193:0033330003322330332442233444443334444443124444230124423000111100
-- 194:0211000002131100021333110213311002111000021000000110000011110000
-- 195:0000000001101100122122101232321012333210012321000012100000010000
-- 196:0000000002202200244244202444442024444420024442000024200000020000
-- 197:0000000001111110001441000012210001244210124444211222222101111110
-- 198:0000000000000000000000000010010001214110124414211224412101111110
-- 199:0000000001100110001331000013210000122100001211000011110000011000
-- 208:0000000000000000000000000000001100000133000013320011332101213313
-- 209:0000000000000000000000001010000031310000123310001113310033323100
-- 222:0000000000000000000000000000000100000014000001120000134400013333
-- 223:0000000000000000000000001100000044100000244100003244100043244100
-- 224:0121233401211233012112220121123314432233144332320123322301222233
-- 225:4442310044423100222210002223210032222100232221003332310033332410
-- 238:0001343300133433000123220001444400001444000001220001123300012323
-- 239:3324410023244100421441004314100011114100100010002110000023100000
-- 240:0121223301212131012111110121011101210113012101320121001200100001
-- 241:1113241011112100111110003331100011231000112100001121000011110000
-- 254:0001222200014122000143220001132200001111000012110001321100011111
-- 255:2311000011310000313100003111000011100000121000003210000011100000
-- </SPRITES>

-- <MAP>
-- 000:300000000000000000000000000000000000000000000000000000000030300000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 006:000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 007:0000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:000000000000000000000000000000000000000000001010100000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:000000000000000000000000000000000000000000001000000000000000000000000000000000101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 010:000000000000000000000000000f00000000000000001000000000000000000000000000101010000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 011:0000000000000000000000000000000000000000101010000a0000000000000000101010000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 012:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 013:000000000000000000000000000020202020101010100000000000000000000000000000004f00000000000000000000000000001010000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 014:000000700000000000000000000000000000000f00000000101010101000000008000000000000000000000000000000001000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 015:000000000000000000000000000000000000000f00000000101010101000000000000000000000000000000000001010001000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 016:301010101010101010101010101010101010101010101010101010101050501010101010101010101010101010101010101000000000001010000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 017:000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000001000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 018:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 019:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 020:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 023:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 028:000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 030:000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 031:000000000000000000000000000000000000000000001010101010101000000000000000000008000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 032:000000000000000010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 033:000000000000000000000000000000000000000000000000000000000000300000000000001010101010101010101010101010101010101010101030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </MAP>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- </WAVES>

-- <SFX>
-- 000:b210c200e200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200300000000000
-- 001:b220c250d280f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200307000000000
-- 002:d200e210f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200307000000000
-- 003:c220a250a260b280c280f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200307000000000
-- 004:b390b3e0c3b0d3e0e340d3a0e380d300e300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300407000000000
-- 016:3130513071009100b100c100e100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100503000000400
-- 017:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007000000000
-- 018:20003000400040005000500060006000700080009000a000b000c000d000e000f000f000f000f000f000f000f000f000f000f000f000f000f000f000302000000000
-- 019:030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300305000000000
-- 032:210041006100710081009100b100c100d100e100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100305000000000
-- 033:010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100300000000000
-- </SFX>

-- <FLAGS>


-- </FLAGS>

-- <PALETTE>
-- 000:1a1c2c0f380f3062308bac0f9bbc0f04002038b764ff000029366f3b5dc941a6f673eff7f4f4f494b0c2566c86101c2c
-- </PALETTE>

